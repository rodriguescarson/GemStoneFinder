# -*- coding: utf-8 -*-
"""GemstoneFinder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UPBQAGlfXLJsVHCzHE4q6tdGPNkrPLtl
"""

import tensorflow as tf
from zipfile import ZipFile



!unrar x "train.rar" "./"

base_dir="./train"

IMAGE_SIZE=112
BATCH_SIZE=8

datagen= tf.keras.preprocessing.image.ImageDataGenerator(
    rotation_range=25,
    zoom_range=0.1,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.2,
    horizontal_flip=True,
    validation_split=0.1
)
train_generator = datagen.flow_from_directory(
    base_dir,
    target_size=(IMAGE_SIZE,IMAGE_SIZE),
    batch_size=BATCH_SIZE,
    subset='training'
)
val_generator = datagen.flow_from_directory(
    base_dir,
    target_size=(IMAGE_SIZE,IMAGE_SIZE),
    batch_size=BATCH_SIZE,
    subset='validation'
)

labels='\n'.join(sorted(train_generator.class_indices.keys()))
with open('labels.txt','w') as f:
  f.write(labels)

IMG_SHAPE=(IMAGE_SIZE,IMAGE_SIZE,3) 

base_model=tf.keras.applications.VGG16(input_shape=IMG_SHAPE,
                                              include_top=False,
                                              weights='imagenet')

base_model.trainable=False

model=tf.keras.Sequential([
                           base_model,
                           tf.keras.layers.Dense(800,activation='relu'),
                           tf.keras.layers.Flatten(),
                           tf.keras.layers.Dense(264,activation='relu'),
                           tf.keras.layers.Dense(50,activation='softmax')
])

model.compile(optimizer=tf.keras.optimizers.Adam(),
              loss="categorical_crossentropy",
              metrics=['accuracy']
              )

epochs=10

history=model.fit_generator(train_generator,
                  epochs=epochs,
                  validation_data=val_generator)

saved_model_dir=''
tf.saved_model.save(model,saved_model_dir)

converter=tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)
tflite_model=converter.convert()

with open('model.tflite','wb') as f:
  f.write(tflite_model)

from google.colab import files
files.download('model.tflite')
files.download('labels.txt')